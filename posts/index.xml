<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on knsh14</title>
		<link>https://knsh14.github.io/posts/</link>
		<description>Recent content in Posts on knsh14</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja-ja</language>
		<lastBuildDate>Sat, 19 Dec 2020 17:32:07 +0900</lastBuildDate>
		<atom:link href="https://knsh14.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>2020年買ってよかったもの</title>
			<link>https://knsh14.github.io/posts/2020-best-buyings/</link>
			<pubDate>Sat, 19 Dec 2020 17:32:07 +0900</pubDate>
			
			<guid>https://knsh14.github.io/posts/2020-best-buyings/</guid>
			<description>今年買ったものの内買ってよかったなと思ったものを紹介します。 コーヒー関係 COMANDANTE C40 MK3 https://comandantegrinder.com/index.html#styles 在宅勤務になったので、家でおいしいコーヒーを飲むためにコーヒ</description>
			<content type="html"><![CDATA[<p>今年買ったものの内買ってよかったなと思ったものを紹介します。</p>
<h1 id="コーヒー関係">コーヒー関係</h1>
<h2 id="comandante-c40-mk3">COMANDANTE C40 MK3</h2>
<p><a href="https://comandantegrinder.com/index.html#styles">https://comandantegrinder.com/index.html#styles</a></p>
<p>在宅勤務になったので、家でおいしいコーヒーを飲むためにコーヒーグラインダーを買いました。
これがあれば、ドリップコーヒー、水出しコーヒー、エスプレッソなど自分が作るコーヒーに使えるので最高です。
日本で買おうとするとかなり高額なものですので、海外から個人輸入するのがお勧めです。</p>
<p>電動のグラインダーや COMANDANTE 以外の手動のグラインダーも検討しましたが、挽目のクオリティや値段などを考慮して COMANDANTE に決めました。
電動だと wilfa Svart Aroma やカリタの Next G が調べた性能や周囲の満足度を聞くと良さそうです。
手動では COMANDANTE のほかに <a href="https://www.kinugrinders.com/index.php?page=m_home_page.public.show_product&amp;Id_Product=16">Kinu Grinder</a> や Timemore 社のグラインダーが最後まで候補に上がっていました。</p>
<h1 id="家電関係">家電関係</h1>
<h2 id="ドラム式洗濯機">ドラム式洗濯機</h2>
<p>雨の日や冬に天気や気温を気にせず洗濯できるのでかなり洗濯が楽になります。
使っているのは東芝の <a href="https://www.toshiba-lifestyle.co.jp/living/laundries/tw_127x8/">TW-127X8</a> という機種です。
普通の乾燥モードでは服の縮みが気になります。
TW-127X8 には上質乾燥モードというシワを少なく乾燥できるモードがあります。
上質乾燥モードは一度に洗濯できる量が通常より少ないです。
しかしシワになりづらいのはかなりメリットがあるため常に使っています。</p>
<p>ドラム式があると洗濯のタイミングを考えずに済み、たまったら予約洗濯して乾燥が終わったら仕事の合間にたたむだけですべて終わります。</p>
<h2 id="ドラム式洗濯機用の糸くずフィルタ">ドラム式洗濯機用の糸くずフィルタ</h2>
<p>大きなダイソーなどの100均で売っているものです。
前述したドラム式洗濯機を使っていると洗濯槽内にかなり毛くずがたまって服にもついたのでストレスを感じていました。
解決策を調べてみたところ毛くずフィルタを使うと軽減されるという話を聞いて試しました。</p>
<p>実際にかなり毛くずがとれるし、洗濯槽内の毛くずも減ったので大満足です。
常に在庫を切らさないよう大量に買っています。</p>
<h2 id="電動ひげそり">電動ひげそり</h2>
<p><a href="https://www.philips.co.jp/c-p/S9731_33/shaver-series-9000-wet-and-dry-electric-shaver">https://www.philips.co.jp/c-p/S9731_33/shaver-series-9000-wet-and-dry-electric-shaver</a></p>
<p>今まで T 字ひげそりで剃っていましたが、毎回口周りがぼろぼろになっていました。
この辛さが軽減されるならと思い電動ひげそりを購入しました。</p>
<p>電動ひげそり業界的には次のような評価になるようです。</p>
<ul>
<li>深剃りのパナソニック ラムダッシュ</li>
<li>肌に優しいフィリップスシリーズ</li>
<li>細かいところまでそれるブラウン</li>
</ul>
<p>自分は肌がボロボロになることがつらかったためフィリップスを選択しました。
S9731/33 は防水仕様になっているため、風呂場でシャワーを浴びながらひげを柔らかくしてその場でそることができます。
また充電と洗浄を同時にできるスタンドが付属しているので、充電しながらヘッドを洗浄できます。
複数回使って充電が減ってきたタイミングで洗浄もやるようにしています。</p>
<h2 id="gopro-hero9-black">GoPro Hero9 Black</h2>
<p><a href="https://gopro.com/ja/jp/shop/cameras/hero9-black/CHDHX-901-master.html">https://gopro.com/ja/jp/shop/cameras/hero9-black/CHDHX-901-master.html</a></p>
<p>私はサッカーが趣味で、ほぼ毎週のように個人参加のフットサルに行って運動しています。
せっかく参加するのでもう少し上達したいなと思い、自分のプレーを記録して振り返るために購入しました。</p>
<p>付属のバッテリ1つでだいたい90分から100分程度録画できます。
自分のユースケースだと120分程度は録画できてほしいため、モバイルバッテリをつないで充電しながら録画すればやりたいことは達成できます。</p>
<p>公式サイトから購入すると 32GB の microSD カードがおまけでついています。
録画する画質にもよりますが、32GB では心許ないため、より容量の大きなものを購入する必要があるでしょう。
400GB ほどあると気持ちにも余裕ができます。</p>
<h2 id="nintendo-switch--リングフィットアドベンチャー">Nintendo Switch &amp; リングフィットアドベンチャー</h2>
<p>ヨドバシカメラの抽選販売で Nintendo Switch が購入できたのでリングフィットアドベンチャーも購入して始めました。</p>
<p>高校生時代から筋トレは嫌いであまりやってこなかったのですが、任天堂のゲーミフィケーションにハマってそれなりに継続しています。
スクワットやプランクを後どれくらい頑張ればいいのかわかりやすいのがつらいことから逃げたい人間としてはよいです。</p>
<h1 id="その他">その他</h1>
<h2 id="10yc-のシャツ">10YC のシャツ</h2>
<p><a href="https://10yc.jp/product/navy-10yc-shirts/">https://10yc.jp/product/navy-10yc-shirts/</a></p>
<p>ドラム式洗濯機は乾燥機能が画期的ですが、シャツなどを乾燥させるとどうしてもシワができてしまいます。
それは乾燥機を使う以上避けられません。
そのため、着る服の方を乾燥機に適したものへ変えました。</p>
<p>10YC のシャツは普通の綿製シャツに見えますが 100% ポリエステル製です。
ポリエステルなので乾燥による縮みがおきません。
乾燥機にかけてもシワがまったくできませんし、乾燥させなくても一晩干せば朝には乾いています。</p>
<p>このシャツを買ったおかげで外にシャツを干す必要がなくなったので洗濯がかなり効率化されました。</p>
<h2 id="moonlander-mark1">Moonlander Mark1</h2>
<p><a href="https://www.zsa.io/moonlander/">https://www.zsa.io/moonlander/</a></p>
<p>Ergodox EZ で有名な zsa がリリースした新しいキーボードです。
基本の仕様は Ergodox EZ と似ています。しかし、次の変更点があります。</p>
<ul>
<li>親指用キーの個数を削減</li>
<li>親指部分の角度が調整できる</li>
<li>アームレストがついた</li>
<li>必ず LED 付き</li>
</ul>
<p>親指のキーが多すぎたり、親指の角度が調整できない私用は Ergodox EZ でかなり不満を持っていた部分ですので、これが改善された Moonlander はかなり満足度が高いキーボードです。
はじめて LED がついたキーボードも使っているので、いろいろ光らせて遊んでいます。</p>
<p>キースイッチが変更可能ですので、最小ロットでいろいろ買って試していました。</p>
<ul>
<li>Zilent V2 65g
<ul>
<li><a href="https://yushakobo.jp/shop/a02zi/">https://yushakobo.jp/shop/a02zi/</a></li>
</ul>
</li>
<li>Aliaz Silent
<ul>
<li><a href="https://yushakobo.jp/shop/a02az/">https://yushakobo.jp/shop/a02az/</a></li>
</ul>
</li>
<li>Gateron Silent 赤
<ul>
<li><a href="https://yushakobo.jp/shop/a02gs/">https://yushakobo.jp/shop/a02gs/</a></li>
</ul>
</li>
<li>DUROCK Dolphin
<ul>
<li><a href="https://talpkeyboard.stores.jp/items/5f42685dd7e1d854dfd90268">https://talpkeyboard.stores.jp/items/5f42685dd7e1d854dfd90268</a></li>
</ul>
</li>
<li>TTC サイレントキースイッチ V2
<ul>
<li><a href="https://talpkeyboard.stores.jp/items/5ecb77a072b911747a43936c">https://talpkeyboard.stores.jp/items/5ecb77a072b911747a43936c</a></li>
</ul>
</li>
</ul>
<p>最終的に DUROCK のスイッチが好みにあっていたため、メインのスイッチとして採用しています。
エンターキーなどは感触を変えてわかりやすくするために強いタクタイル感がある Zilent を残しています。</p>
]]></content>
		</item>
		
		<item>
			<title>golang.tokyo #27 で「uber-go/guide の解説」というタイトルで発表しました</title>
			<link>https://knsh14.github.io/posts/talk-about-guide-in-golang-tokyo-27/</link>
			<pubDate>Wed, 06 Nov 2019 01:12:03 +0900</pubDate>
			
			<guid>https://knsh14.github.io/posts/talk-about-guide-in-golang-tokyo-27/</guid>
			<description>11月5日に行われたgolang.tokyo#27で「uber-go/guide の解説」というタイトルで発表しました。 資料はこちらです。 内容</description>
			<content type="html"><![CDATA[<p>11月5日に行われた<a href="https://techplay.jp/event/753881">golang.tokyo#27</a>で「uber-go/guide の解説」というタイトルで発表しました。<br>
資料は<a href="https://docs.google.com/presentation/d/10H6tvkVG2Qb9DNeSITAiKP-5BJKHqwnWFRCxEQYbpYQ/edit#slide=id.p">こちら</a>です。</p>
<h1 id="内容">内容</h1>
<p><a href="https://github.com/uber-go/guide/">uber-go/guide</a>というUberがまとめたコードレビューに関するドキュメントがあります。<br>
これを自分が日本語に翻訳しました。
このguideから自分の翻訳へのリンクも張ってもらっています。</p>
<p>このドキュメントを翻訳した際、どのように翻訳したのかやそもそもなぜ翻訳をやろうと思ったのかなどを説明しました。<br>
そして、自分が読んでいて特にこれは参考になったなと思ったセクションの一部を取り上げて解説しました。<br>
最後に自分が最近取り組んでいるuber-go/guideのセクションをチェックしてくれるulinterというlinterについても話しました。</p>
<h1 id="発表した感想">発表した感想</h1>
<h2 id="良かったこと">良かったこと</h2>
<p>Twitter上では期待してくれる方がいて、良かったというツイートもいただけました。
かなりよいフィードバックがあったので素直にうれしかったです。<br>
自分は技術的文章を翻訳する際の期間や方法の話はこれまであまり聞いたことがなかったです。
また、自分も発表したことがなかったため、かなり新鮮でした。
この話を聞いてくれた方はどう感じたのか気になります。</p>
<h2 id="失敗したなと思ったこと">失敗したなと思ったこと</h2>
<p>ulinterの話をする際に、コードを紹介しながら実装の説明をしました。
AssignStmtやTypeAssertExprなど、GoのASTの話を具体的に話ました。
しかし、会場の方はGoの静的解析について事前知識があまりなさそうな雰囲気を感じました。
いきなりこれらの話を出すのは聞いてくださった方々を置いていってしまったと反省しています。</p>
<p>発表時間が少し予定時間を超えたのでこれも収まるように配分練習等すべきでした。</p>
<h1 id="終わりに">終わりに</h1>
<p>前回外部発表したときから1ヵ月以上期間が空いたので緊張しましたがなんとか発表できてよかったです。
聞いてくれた方はこれを機会に英語で書かれたドキュメントも恐れずに読んで見てほしいです。</p>
]]></content>
		</item>
		
		<item>
			<title>reviewdogとGitHub Actionsでtextlintチェックをする</title>
			<link>https://knsh14.github.io/posts/textlint-reviewdog/</link>
			<pubDate>Fri, 27 Sep 2019 12:30:29 +0900</pubDate>
			
			<guid>https://knsh14.github.io/posts/textlint-reviewdog/</guid>
			<description>この記事ではreviewdogとtextlintを組み合わせてGitHub Actionsで利用する方法を説明します。 モチベーション 技術書典の</description>
			<content type="html"><![CDATA[<p>この記事では<a href="https://github.com/reviewdog/reviewdog">reviewdog</a>と<a href="https://github.com/textlint/textlint">textlint</a>を組み合わせてGitHub Actionsで利用する方法を説明します。</p>
<h1 id="モチベーション">モチベーション</h1>
<p>技術書典のRe:Viewで書籍を書くためのサンプルリポジトリでは、textlintとreviewdogによって誤字や、不適切な表現をチェックしています。</p>
<p>私は文章力を向上させるためにこのブログを更新しています。
そのため、技術書典と同等のレベルで内容のチェックをすることは非常によい訓練になります。
TechBoosterが公開している<a href="https://github.com/TechBooster/ReVIEW-Template">Re:VIEW Template</a>ではCircleCIを利用してPull Requestにコメントを付けています。
しかし私はこのブログをデプロイするためにGitHub Actionsを利用しています。
そこでtextlintのチェックもGitHub Actionsで行えるように設定しました。</p>
<p>口語に近い文章を書いてしまってもすり抜けてしまう箇所もあるため、完璧ではありません。</p>
<h1 id="textlintのインストール">textlintのインストール</h1>
<p>初めにnpmをインストールします。
私は<a href="https://github.com/hokaccha/nodebrew">nodebrew</a>を利用してインストールしました。</p>
<p>次に<code>npm init</code>コマンドでモジュールを定義します。
このコマンドを実行して質問に答えていくと<code>package.json</code>が作成されます。</p>
<p><code>npm install</code>コマンドでtextlintとtextlintのためのプラグインなどをインストールします。</p>
<pre><code>npm install textlint textlint-filter-rule-comments textlint-filter-rule-whitelist textlint-plugin-review textlint-rule-max-ten textlint-rule-preset-ja-technical-writing textlint-rule-preset-japanese textlint-rule-prh
</code></pre><p><code>.textlintrc</code> や設定ファイルなどは<a href="https://github.com/TechBooster/ReVIEW-Template">ReVIEW-Template</a>から持ってきます。
この設定ファイルを使うことで技術書典と同じレベルでチェックできます。</p>
<h1 id="workflowの設定">workflowの設定</h1>
<p>リポジトリのルートに <code>.github/workflow</code> ディレクトリを作成します。
このディレクトリに <code>textlint.yaml</code> を作成し、次のワークフローを設定します。</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">textlint</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v1</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Use Node.js</span><span class="w">
</span><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@v1</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">12.</span><span class="l">x</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">npm install</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        </span><span class="w">        </span><span class="l">npm install</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">install reviewdog</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          </span><span class="w">          </span><span class="l">curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s  v0.9.13</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">lint</span><span class="w">
</span><span class="w">      </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">REVIEWDOG_GITHUB_API_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          </span><span class="w">          </span><span class="l">$(npm bin)/textlint -f checkstyle content/posts/*.md | ./bin/reviewdog -f=checkstyle -name=textlint -reporter=github-pr-review</span><span class="w">
</span></code></pre></div><p>masterにむけたPull Requestが更新されるたびにworkflowが実行されるようにしています。
<code>npm install</code>を毎回キャッシュを使わずにインストールしていますが、現時点で実行時間が30秒程度なのであまり問題になっていません。</p>
]]></content>
		</item>
		
		<item>
			<title>技術書典7に参加してきました</title>
			<link>https://knsh14.github.io/posts/techbookfest-7/</link>
			<pubDate>Tue, 24 Sep 2019 19:36:24 +0900</pubDate>
			
			<guid>https://knsh14.github.io/posts/techbookfest-7/</guid>
			<description>技術書典7に参加してきました。 私は今回&amp;quot;かまてん&amp;ldquo;というサークルでGoのテストについての本を頒布しました。 他にも golang.tokyo メル</description>
			<content type="html"><![CDATA[<p><a href="https://techbookfest.org/event/tbf07">技術書典7</a>に参加してきました。
私は今回&quot;<a href="https://techbookfest.org/event/tbf07/circle/5741270278340608">かまてん</a>&ldquo;というサークルでGoのテストについての本を頒布しました。</p>
<p>他にも</p>
<ul>
<li><a href="https://techbookfest.org/event/tbf07/circle/5174941137764352">golang.tokyo</a></li>
<li><a href="https://techbookfest.org/event/tbf07/circle/5642184086781952">メルカリ技術書典部</a></li>
</ul>
<p>に記事を寄稿しました。</p>
<h1 id="寄稿した記事の概要">寄稿した記事の概要</h1>
<h2 id="かまてん">かまてん</h2>
<p>かまてんは私かまたと<a href="https://twitter.com/tenntenn">@tenntenn</a>の二人のサークルです。<br>
今回はGoのテストについて使い方やテストのためのテクニック、テストしやすいコードを書くためにはどこを意識して書いたらよいのかを解説しています。</p>
<p>ベースにしたのはGopherCon 2017でMitchell Hashimotoが発表した&quot;Advanced Testing with Go&quot;です。
彼の発表資料や動画をベースにそれぞれの項目を噛み砕いて説明し、理解が深まるようにいくつかの項目にはサンプルをつけました。
発表資料へのリンクは次の3つです。</p>
<ul>
<li><a href="https://speakerdeck.com/mitchellh/advanced-testing-with-go">https://speakerdeck.com/mitchellh/advanced-testing-with-go</a></li>
<li><a href="https://www.youtube.com/watch?v=8hQG7QlcLBk">https://www.youtube.com/watch?v=8hQG7QlcLBk</a></li>
<li><a href="https://about.sourcegraph.com/go/advanced-testing-in-go">https://about.sourcegraph.com/go/advanced-testing-in-go</a></li>
</ul>
<p>二人なので常にギリギリの戦いをしながら本を書いています。
今回も当日まで頑張って色々修正してなんとか頒布することができました。</p>
<p>後日BOOTHにて当日頒布したものからもう少し追記したものを販売する予定です。
当日買いそびれた方はそちらで購入していただけます。</p>
<h2 id="golangtokyo">golang.tokyo</h2>
<p>Goのコミュニティであるgolang.tokyoでは有志のメンバーが集って、それぞれが好きなトピックについて書きました。
自分はGopherCon 2019で観てよいと感じたGioというGoのGUIライブラリについて、サンプルを使いながら紹介しました。</p>
<p>Gioについての資料は次の4つがあります。</p>
<ul>
<li><a href="https://git.sr.ht/~eliasnaur/gio">https://git.sr.ht/~eliasnaur/gio</a></li>
<li><a href="https://godoc.org/gioui.org">https://godoc.org/gioui.org</a></li>
<li><a href="https://www.youtube.com/watch?v=9D6eWP4peYM">https://www.youtube.com/watch?v=9D6eWP4peYM</a></li>
<li><a href="https://go-talks.appspot.com/github.com/eliasnaur/gophercon-2019-talk/gophercon-2019.slide#1">https://go-talks.appspot.com/github.com/eliasnaur/gophercon-2019-talk/gophercon-2019.slide#1</a></li>
</ul>
<p>GioはGitHubを使っていないため、コントリビュートする手順がメーリングリストでパッチを投げるという普段馴染みのない方法です。
そこで、私がコントリビュートした時の手順も紹介しています。</p>
<p>golang.tokyoは今回表紙を<a href="https://twitter.com/tottie_designer">tottie</a>さんに依頼しました。
tottieさんはGoのスタンプを制作されたり、かわいいGopherの画像をtwitterにアップされてるデザイナーの方です。
今回作成して頂いた表紙がとても可愛かったので自分でもポスター欲しいなと思いました。
おかげさまで物理本は完全に捌き切ったので、表紙は大事ですね。</p>
<h2 id="メルカリ技術書典部">メルカリ技術書典部</h2>
<p>私が所属しているメルペイとメルカリのエンジニアで記事を書きました。<br>
私は先日のMERPAY TECH OPENNESS MONTHの際に投稿した<a href="https://tech.mercari.com/entry/2019/06/13/171305">&ldquo;メルペイにおけるお客さま残高の管理手法&rdquo;</a>をブラッシュアップして寄稿しました。</p>
<p>私が担当しているマイクロサービスがどのような設計になっているかについて解説しています。
お客様の残高を預かるサービスにおいて取引の整合性をどのように担保するかについて、工夫した点を解説しています。
内容的には変わっていませんが、読みづらい文章を修正したり画像を入れ替えたりしました。</p>
<p>&ldquo;ちょっと手直しするだけでいいから楽勝だよ！&ldquo;と言われたのでほいほいついて行きましたが、結果的に半分くらいは書き直したり、詳しく説明し直した気がします。
そこから更に<a href="https://twitter.com/mhidaka">@mhidaka</a>先生が神編集してくださって、よい文章に改造していただきました。</p>
<h1 id="反省">反省</h1>
<p>私は文章を書くのが苦手で、修正項目の8割ほどは文章の校正に費やされています。
textlintなどを使って機械的にレビューしていますが、細かい接続詞などでまだまだ大量に修正点が見つかります。</p>
<p>参考資料として次のリンクを紹介してもらったので、次に見直せるように紹介します。</p>
<ul>
<li><a href="https://qiita.com/mhidaka/items/c5fe729716c640b50ff7">技術的な文章を書くための第0歩 ～読者に伝わる書き方～</a></li>
<li><a href="https://qiita.com/vvakame/items/d657baf26cf83ac98bd0">技術的な文章を書くための1歩、2歩、3歩</a></li>
</ul>
<p>他にも、次の書籍は文章作成の参考になると伺いました。</p>
<ul>
<li>理科系の作文技術</li>
<li>技術者のためのテクニカルライティング入門講座</li>
</ul>
<p>どちらもKindleで読めます。気になった方はぜひ読んでみてください。</p>
<h1 id="感想">感想</h1>
<p>かまてんでは前回頒布したGoで静的解析をする時の逆引き辞典も頒布しました。
前回手に入れそびれた方が手に取ってくださったので、まだまだ需要がありそうだと感じました。
<a href="https://knsh14.booth.pm/items/1319336">静的解析についての本</a>はBOOTHでいつでも購入いただけます。</p>
<p>今回も徹夜で文章を修正して、朝8時に見本誌を印刷するというバタバタっぷりでした。
しかし、当日は多くの方に手にとっていただけたので参加してよかったなと思います。</p>
<p>技術書典8も頑張って記事を書いていきます。
次は日本語がおかしいという指摘が半分くらいになるように頑張ります！</p>
]]></content>
		</item>
		
		<item>
			<title>HugoのデプロイをGitHub Actionsで行う</title>
			<link>https://knsh14.github.io/posts/how-to-automate-deploying-hugo/</link>
			<pubDate>Sat, 14 Sep 2019 01:01:53 +0900</pubDate>
			
			<guid>https://knsh14.github.io/posts/how-to-automate-deploying-hugo/</guid>
			<description>HugoとGitHub Pagesを利用してブログや自分のページをデプロイしてる方は大勢います。 自分も最近ブログを書こうと思い立ってHugoで</description>
			<content type="html"><![CDATA[<p>HugoとGitHub Pagesを利用してブログや自分のページをデプロイしてる方は大勢います。<br>
自分も最近ブログを書こうと思い立ってHugoでブログを作ろうと考えました。<br>
せっかくなのでブログを書いてPRを投げてmasterにマージされたら自動で静的ファイルを作成して公開する仕組みが欲しくなりました。<br>
なので、GitHub Actionsを使って作ってみることにしました。</p>
<h1 id="事前準備">事前準備</h1>
<ul>
<li>記事を書く用のリポジトリ</li>
<li>デプロイ先のリポジトリ</li>
<li>GitHubのPersonal Access Token
<ul>
<li>repoの操作が可能な権限を付ける必要があります</li>
</ul>
</li>
</ul>
<p>記事を書く用のリポジトリはPrivateでも構いません。<br>
デプロイ先のリポジトリは<code>USERNAME.github.io</code>という名前にする必要があります</p>
<h1 id="記事のリポジトリにトークンを設定する">記事のリポジトリにトークンを設定する</h1>
<p>記事を書く用のリポジトリに事前準備で作成したPersonal Access Tokenを設定します。<br>
リポジトリのSettings -&gt; Secretsを開き、「Add a new secret」を押して、Nameを「MY_GITHUB_ACCESS_TOKEN」Valueに先程のトークンを設定します。
この設定を入れないと、別のリポジトリにアクセスする権限を持てないので必ず設定する必要があります。<br>
詳しいドキュメントは<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables">本家のドキュメント</a>を参照してください。</p>
<h1 id="記事のリポジトリにworkflowを設定する">記事のリポジトリにworkflowを設定する</h1>
<p>記事のリポジトリのルートに移動して、<code>.github/workflows</code>ディレクトリを作成します。<br>
その中に次のようなワークフローを定義します。</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Go</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">master</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up Go 1.12</span><span class="w">
</span><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-go@v1</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">go-version</span><span class="p">:</span><span class="w"> </span><span class="m">1.12</span><span class="w">
</span><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">go</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check out code into the Go module directory</span><span class="w">
</span><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v1</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">install hugo</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        </span><span class="w">        </span><span class="l">go get -u github.com/gohugoio/hugo</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">setup public repo</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          </span><span class="w">          </span><span class="l">git clone --depth 1 https://USERNAME:${{ secrets.MY_GITHUB_ACCESS_TOKEN }}@github.com/USERNAME/USERNAME.github.io.git public</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        export PATH=$PATH:`go env GOPATH`/bin
</span><span class="sd">        git submodule init
</span><span class="sd">        git submodule update
</span><span class="sd">        hugo</span><span class="w">        
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Push</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        export MSG=`git log --format=%B -n 1 HEAD`
</span><span class="sd">        cd public
</span><span class="sd">        git config --local user.name &#34;NAME&#34;
</span><span class="sd">        git config --local user.email &#34;EMAIL@gmail.com&#34;
</span><span class="sd">        git add .
</span><span class="sd">        git commit -m &#34;${MSG}&#34;
</span><span class="sd">        git push origin master</span><span class="w">        
</span></code></pre></div><p>Goをベースにしたワークフローを利用します。
setup public repoのステージでHugoをビルドした結果の静的ファイルが吐き出されるディレクトリを公開用のリポジトリで管理できるようにします。<br>
Buildステージで環境変数のPATHにGoのバイナリのある場所も追加してHugoコマンドが使えるようにします。<br>
Pushステージで記事用のリポジトリのコミットメッセージを取得して公開用のリポジトリのコミットメッセージにします。<br>
以上で設定が完了したので記事用のリポジトリのmasterにpushするとActionsが起動して公開用のリポジトリに送信されます。</p>
<p>このブログもこのようにして公開されています。
GitHub Actionsを利用するとCircle CIなどに別で登録したり確認しに行く作業がなくなります。
GitHubだけで作業が完結できるのでかなり便利だなと感じました。</p>
]]></content>
		</item>
		
	</channel>
</rss>
