<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>knsh14</title>
    <link>https://knsh14.github.io/</link>
    <description>Recent content on knsh14</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-ja</language>
    <lastBuildDate>Sun, 29 Mar 2020 18:25:14 +0900</lastBuildDate>
    
	<atom:link href="https://knsh14.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Works</title>
      <link>https://knsh14.github.io/works/</link>
      <pubDate>Sun, 29 Mar 2020 18:25:14 +0900</pubDate>
      
      <guid>https://knsh14.github.io/works/</guid>
      <description>Translations 英語の文章を日本語へ翻訳しています。
 Go CodeReview Comments Uber Style Guide Sourcegraph Go style guide  原文    Qiita Presentations  uber-go/guide の解説  golang.tokyo #27   チャネルの仕組み  golang.tokyo #17   Go でインタプリタを書いてみよう  Go Conference 2017 Autumn    </description>
    </item>
    
    <item>
      <title>Go Codereview Comments</title>
      <link>https://knsh14.github.io/translations/go-codereview-comments/</link>
      <pubDate>Sun, 29 Mar 2020 18:23:14 +0900</pubDate>
      
      <guid>https://knsh14.github.io/translations/go-codereview-comments/</guid>
      <description>原文
go fmt あなたのコードに gofmt を走らせると、自動的に機械的に直すことのできるスタイルの大部分を修正してくれます。 世にあるGoのコードのほとんどすべてが gofmt を使っています。 この文章の残りは機械的に直すことのできないポイントについて解説します。
代わりに goimports を使う手段もあります。 gofmt に加えて必要に応じてimport内に空行をつけたり消したりする機能があります。
Comment Sentences http://golang.org/doc/effective_go.html#commentary を読みましょう。 func や struct などのドキュメントのためのコメントは多少冗長であっても完全な文章でなくてはいけません。 このアプローチは godoc ドキュメントにするときにより効果を発揮します。 コメントは以下の例のように対象の名前で始まって、ピリオドで終わらなければいけません。
// Request represents a request to run a command. type Request struct { ... // Encode writes the JSON encoding of req to w. func Encode(w io.Writer, req *Request) { ... </description>
    </item>
    
    <item>
      <title>golang.tokyo #27 で「uber-go/guide の解説」というタイトルで発表しました</title>
      <link>https://knsh14.github.io/posts/talk-about-guide-in-golang-tokyo-27/</link>
      <pubDate>Wed, 06 Nov 2019 01:12:03 +0900</pubDate>
      
      <guid>https://knsh14.github.io/posts/talk-about-guide-in-golang-tokyo-27/</guid>
      <description>11月5日に行われたgolang.tokyo#27で「uber-go/guide の解説」というタイトルで発表しました。
資料はこちらです。
内容 uber-go/guideというUberがまとめたコードレビューに関するドキュメントがあります。
これを自分が日本語に翻訳しました。 このguideから自分の翻訳へのリンクも張ってもらっています。
このドキュメントを翻訳した際、どのように翻訳したのかやそもそもなぜ翻訳をやろうと思ったのかなどを説明しました。
そして、自分が読んでいて特にこれは参考になったなと思ったセクションの一部を取り上げて解説しました。
最後に自分が最近取り組んでいるuber-go/guideのセクションをチェックしてくれるulinterというlinterについても話しました。
発表した感想 良かったこと Twitter上では期待してくれる方がいて、良かったというツイートもいただけました。 かなりよいフィードバックがあったので素直にうれしかったです。
自分は技術的文章を翻訳する際の期間や方法の話はこれまであまり聞いたことがなかったです。 また、自分も発表したことがなかったため、かなり新鮮でした。 この話を聞いてくれた方はどう感じたのか気になります。
失敗したなと思ったこと ulinterの話をする際に、コードを紹介しながら実装の説明をしました。 AssignStmtやTypeAssertExprなど、GoのASTの話を具体的に話ました。 しかし、会場の方はGoの静的解析について事前知識があまりなさそうな雰囲気を感じました。 いきなりこれらの話を出すのは聞いてくださった方々を置いていってしまったと反省しています。
発表時間が少し予定時間を超えたのでこれも収まるように配分練習等すべきでした。
終わりに 前回外部発表したときから1ヵ月以上期間が空いたので緊張しましたがなんとか発表できてよかったです。 聞いてくれた方はこれを機会に英語で書かれたドキュメントも恐れずに読んで見てほしいです。</description>
    </item>
    
    <item>
      <title>reviewdogとGitHub Actionsでtextlintチェックをする</title>
      <link>https://knsh14.github.io/posts/textlint-reviewdog/</link>
      <pubDate>Fri, 27 Sep 2019 12:30:29 +0900</pubDate>
      
      <guid>https://knsh14.github.io/posts/textlint-reviewdog/</guid>
      <description>この記事ではreviewdogとtextlintを組み合わせてGitHub Actionsで利用する方法を説明します。
モチベーション 技術書典のRe:Viewで書籍を書くためのサンプルリポジトリでは、textlintとreviewdogによって誤字や、不適切な表現をチェックしています。
私は文章力を向上させるためにこのブログを更新しています。 そのため、技術書典と同等のレベルで内容のチェックをすることは非常によい訓練になります。 TechBoosterが公開しているRe:VIEW TemplateではCircleCIを利用してPull Requestにコメントを付けています。 しかし私はこのブログをデプロイするためにGitHub Actionsを利用しています。 そこでtextlintのチェックもGitHub Actionsで行えるように設定しました。
口語に近い文章を書いてしまってもすり抜けてしまう箇所もあるため、完璧ではありません。
textlintのインストール 初めにnpmをインストールします。 私はnodebrewを利用してインストールしました。
次にnpm initコマンドでモジュールを定義します。 このコマンドを実行して質問に答えていくとpackage.jsonが作成されます。
npm installコマンドでtextlintとtextlintのためのプラグインなどをインストールします。
npm install textlint textlint-filter-rule-comments textlint-filter-rule-whitelist textlint-plugin-review textlint-rule-max-ten textlint-rule-preset-ja-technical-writing textlint-rule-preset-japanese textlint-rule-prh .textlintrc や設定ファイルなどはReVIEW-Templateから持ってきます。 この設定ファイルを使うことで技術書典と同じレベルでチェックできます。
workflowの設定 リポジトリのルートに .github/workflow ディレクトリを作成します。 このディレクトリに textlint.yaml を作成し、次のワークフローを設定します。
name: textlint on: pull_request: branches: - master jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Use Node.js uses: actions/setup-node@v1 with: node-version: 12.x - name: npm install run: | npm install - name: install reviewdog run: | curl -sfL https://raw.</description>
    </item>
    
    <item>
      <title>技術書典7に参加してきました</title>
      <link>https://knsh14.github.io/posts/techbookfest-7/</link>
      <pubDate>Tue, 24 Sep 2019 19:36:24 +0900</pubDate>
      
      <guid>https://knsh14.github.io/posts/techbookfest-7/</guid>
      <description>技術書典7に参加してきました。 私は今回&amp;rdquo;かまてん&amp;ldquo;というサークルでGoのテストについての本を頒布しました。
他にも
 golang.tokyo メルカリ技術書典部  に記事を寄稿しました。
寄稿した記事の概要 かまてん かまてんは私かまたと@tenntennの二人のサークルです。
今回はGoのテストについて使い方やテストのためのテクニック、テストしやすいコードを書くためにはどこを意識して書いたらよいのかを解説しています。
ベースにしたのはGopherCon 2017でMitchell Hashimotoが発表した&amp;quot;Advanced Testing with Go&amp;quot;です。 彼の発表資料や動画をベースにそれぞれの項目を噛み砕いて説明し、理解が深まるようにいくつかの項目にはサンプルをつけました。 発表資料へのリンクは次の3つです。
 https://speakerdeck.com/mitchellh/advanced-testing-with-go https://www.youtube.com/watch?v=8hQG7QlcLBk https://about.sourcegraph.com/go/advanced-testing-in-go  二人なので常にギリギリの戦いをしながら本を書いています。 今回も当日まで頑張って色々修正してなんとか頒布することができました。
後日BOOTHにて当日頒布したものからもう少し追記したものを販売する予定です。 当日買いそびれた方はそちらで購入していただけます。
golang.tokyo Goのコミュニティであるgolang.tokyoでは有志のメンバーが集って、それぞれが好きなトピックについて書きました。 自分はGopherCon 2019で観てよいと感じたGioというGoのGUIライブラリについて、サンプルを使いながら紹介しました。
Gioについての資料は次の4つがあります。
 https://git.sr.ht/~eliasnaur/gio https://godoc.org/gioui.org https://www.youtube.com/watch?v=9D6eWP4peYM https://go-talks.appspot.com/github.com/eliasnaur/gophercon-2019-talk/gophercon-2019.slide#1  GioはGitHubを使っていないため、コントリビュートする手順がメーリングリストでパッチを投げるという普段馴染みのない方法です。 そこで、私がコントリビュートした時の手順も紹介しています。
golang.tokyoは今回表紙をtottieさんに依頼しました。 tottieさんはGoのスタンプを制作されたり、かわいいGopherの画像をtwitterにアップされてるデザイナーの方です。 今回作成して頂いた表紙がとても可愛かったので自分でもポスター欲しいなと思いました。 おかげさまで物理本は完全に捌き切ったので、表紙は大事ですね。
メルカリ技術書典部 私が所属しているメルペイとメルカリのエンジニアで記事を書きました。
私は先日のMERPAY TECH OPENNESS MONTHの際に投稿した&amp;ldquo;メルペイにおけるお客さま残高の管理手法&amp;rdquo;をブラッシュアップして寄稿しました。
私が担当しているマイクロサービスがどのような設計になっているかについて解説しています。 お客様の残高を預かるサービスにおいて取引の整合性をどのように担保するかについて、工夫した点を解説しています。 内容的には変わっていませんが、読みづらい文章を修正したり画像を入れ替えたりしました。
&amp;ldquo;ちょっと手直しするだけでいいから楽勝だよ！&amp;ldquo;と言われたのでほいほいついて行きましたが、結果的に半分くらいは書き直したり、詳しく説明し直した気がします。 そこから更に@mhidaka先生が神編集してくださって、よい文章に改造していただきました。
反省 私は文章を書くのが苦手で、修正項目の8割ほどは文章の校正に費やされています。 textlintなどを使って機械的にレビューしていますが、細かい接続詞などでまだまだ大量に修正点が見つかります。
参考資料として次のリンクを紹介してもらったので、次に見直せるように紹介します。
 技術的な文章を書くための第0歩 ～読者に伝わる書き方～ 技術的な文章を書くための1歩、2歩、3歩  他にも、次の書籍は文章作成の参考になると伺いました。
 理科系の作文技術 技術者のためのテクニカルライティング入門講座  どちらもKindleで読めます。気になった方はぜひ読んでみてください。</description>
    </item>
    
    <item>
      <title>HugoのデプロイをGitHub Actionsで行う</title>
      <link>https://knsh14.github.io/posts/how-to-automate-deploying-hugo/</link>
      <pubDate>Sat, 14 Sep 2019 01:01:53 +0900</pubDate>
      
      <guid>https://knsh14.github.io/posts/how-to-automate-deploying-hugo/</guid>
      <description>HugoとGitHub Pagesを利用してブログや自分のページをデプロイしてる方は大勢います。
自分も最近ブログを書こうと思い立ってHugoでブログを作ろうと考えました。
せっかくなのでブログを書いてPRを投げてmasterにマージされたら自動で静的ファイルを作成して公開する仕組みが欲しくなりました。
なので、GitHub Actionsを使って作ってみることにしました。
事前準備  記事を書く用のリポジトリ デプロイ先のリポジトリ GitHubのPersonal Access Token  repoの操作が可能な権限を付ける必要があります    記事を書く用のリポジトリはPrivateでも構いません。
デプロイ先のリポジトリはUSERNAME.github.ioという名前にする必要があります
記事のリポジトリにトークンを設定する 記事を書く用のリポジトリに事前準備で作成したPersonal Access Tokenを設定します。
リポジトリのSettings -&amp;gt; Secretsを開き、「Add a new secret」を押して、Nameを「MY_GITHUB_ACCESS_TOKEN」Valueに先程のトークンを設定します。 この設定を入れないと、別のリポジトリにアクセスする権限を持てないので必ず設定する必要があります。
詳しいドキュメントは本家のドキュメントを参照してください。
記事のリポジトリにworkflowを設定する 記事のリポジトリのルートに移動して、.github/workflowsディレクトリを作成します。
その中に次のようなワークフローを定義します。
name: Go on: push: branches: - master jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Set up Go 1.12 uses: actions/setup-go@v1 with: go-version: 1.12 id: go - name: Check out code into the Go module directory uses: actions/checkout@v1 - name: install hugo run: | go get -u github.</description>
    </item>
    
  </channel>
</rss>